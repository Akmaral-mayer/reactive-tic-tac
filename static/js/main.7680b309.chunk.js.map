{"version":3,"sources":["images/simka.png","images/nolik.png","logo.svg","serviceWorker.js","Simka.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Simka","Square","value","onClick","className","Restart","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","winner","possibleLines","i","length","a","b","c","calculateWinner","renderSquare","nextSquares","slice","id","alt","alert","src","simkaImg","nolikImg","isBoardFull"],"mappings":"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","file":"static/js/main.7680b309.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/simka.22254c08.png\";","module.exports = __webpack_public_path__ + \"static/media/nolik.5bdf0343.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport simkaImg from './images/simka.png';\r\n\r\nfunction Simka() {\r\n    return (\r\n        <img width=\"50px\" src={simkaImg}/>\r\n    )\r\n}\r\n\r\nexport default Simka;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Simka from './Simka';\nimport Nolik from './Nolik';\nimport simkaImg from './images/simka.png';\nimport nolikImg from './images/nolik.png';\n\nfunction Square({ value, onClick }) {\n\n    return (\n        <button className=\"square\" onClick={onClick}>\n            {value}\n        </button>\n    );\n}\n\nReactDOM.render(<Square />, document.getElementById('root'));\nserviceWorker.unregister();\n\nfunction Restart({ onClick }) {\n\n    return (\n        <button className=\"restart\" onClick={onClick}>\n            Play again\n      </button>\n    );\n}\n\nfunction Game() {\n    const [squares, setSquares] = useState(Array(9).fill(null));\n    const [isXNext, setIsXNext] = useState(false);\n    const winner = calculateWinner(squares);\n\n    function renderSquare(i) {\n        return (\n            <Square\n                value={squares[i]}\n                onClick={() => {\n                    if (squares[i] != null || winner != null) {\n                        return;\n                    }\n                    const nextSquares = squares.slice();\n                    nextSquares[i] = (isXNext ? 'X' : 'O');\n                    setSquares(nextSquares);\n\n                    setIsXNext(!isXNext); // toggle turns\n                }}\n            />\n        );\n    }\n\n    function renderRestartButton() {\n        return (\n            <Restart\n                onClick={() => {\n                    setSquares(Array(9).fill(null));\n                    setIsXNext(true);\n                }}\n            />\n        );\n    }\n\n    function getStatus() {\n        if (winner) {\n            return \"Winner: \" + winner;\n        } else if (isBoardFull(squares)) {\n            return \"Draw!\";\n        } else {\n            return \"Next player: \" + (isXNext ? \"X\" : \"O\");\n        }\n    }\n\n\n    function simkaClicked() {\n        alert('The first player is Simka');\n        setIsXNext(true);\n    }\n\n    function nolikClicked() {\n        alert('The first player is Nolik');\n        setIsXNext(false);\n    }\n\n    return (\n        <div className=\"container\">\n            <h2>Click one of the following cartoon to be first</h2>\n            <div id=\"lol\" className=\"lol\">\n                <img id=\"one\"\n                    className=\"hero\"\n                    alt=\"Simka\"\n                    onClick={simkaClicked}\n                    src={simkaImg} />\n                <img\n                    id=\"two\"\n                    className=\"hero\"\n                    alt=\"Nolik\"\n                    onClick={nolikClicked}\n                    src={nolikImg} />\n            </div>\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <div className=\"board-row\">\n                        {renderSquare(0)}\n                        {renderSquare(1)}\n                        {renderSquare(2)}\n                    </div>\n                    <div className=\"board-row\">\n                        {renderSquare(3)}\n                        {renderSquare(4)}\n                        {renderSquare(5)}\n                    </div>\n                    <div className=\"board-row\">\n                        {renderSquare(6)}\n                        {renderSquare(7)}\n                        {renderSquare(8)}\n                    </div>\n                </div>\n                <div className=\"game-info\">{getStatus()}</div>\n                <div className=\"restart-button\">{renderRestartButton()}</div>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const possibleLines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    // go over all possibly winning lines and check if they consist of only X's/only O's\n    for (let i = 0; i < possibleLines.length; i++) {\n        const [a, b, c] = possibleLines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n\nfunction isBoardFull(squares) {\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] == null) {\n            return false;\n        }\n    }\n    return true;\n}"],"sourceRoot":""}